version: 2

models:
  - name: dim_bgg
    description: ""
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - date
            - bgg_id
    columns:
      - name: date
        data_type: date
        description: "API call date Sydney time"
        tests:
          - not_null

      - name: bgg_id
        data_type: int64
        description: ""
        tests:
          - unique
          - not_null

      - name: type
        data_type: string
        description: "Either boardgame or expansion"
        tests:
          - not_null
          - accepted_values:
              values: ['boardgame', 'expansion']

      - name: name
        data_type: string
        description: ""
        tests:
          - not_null

      - name: url
        data_type: string
        description: ""
        tests:
          - not_null

      - name: year_published
        data_type: int64
        description: "Null if information not provided"

      - name: min_players
        data_type: int64
        description: "Null if information not provided"
        tests:
          - not_negative

      - name: max_players
        data_type: int64
        description: "Null if information not provided"
        tests:
          - not_negative

      - name: play_time
        data_type: int64
        description: "Null if information not provided"
        tests:
          - not_negative

      - name: min_play_time
        data_type: int64
        description: "Null if information not provided"
        tests:
          - not_negative

      - name: max_play_time
        data_type: int64
        description: "Null if information not provided"
        tests:
          - not_negative
          
      - name: num_ratings
        data_type: int64
        description: "Number of user ratings"
        tests:
          - not_null
          - not_negative

      - name: avg_rating
        data_type: float64
        description: "Average score from 1-10 of user ratings. Null if no ratings"
        tests:
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 10

      - name: standard_deviation_rating
        data_type: float64
        description: "Standard deviation of user ratings. Null if no ratings"
        tests:
          - not_negative

      - name: geek_rating
        data_type: float64
        description: >
                    BoardGameGeek's adjusted rating used for determing bgg_rank. Geek_rating involves adding dummy ratings to
                    user ratings, moving the rating towards the norm of all games in the database. Rating between 1-10.
                    
                    This makes games with a small amount of votes but very high ratings to be ranked lower than games with 
                    more votes and less average user rating. 
                    
                    Null if geek_rating is not calculated. Geek_rating (and bgg_rank) is not calculated for expansions, compilations,
                    number of user ratings less than 30, and other hidden criteria.
        tests:
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 10

      - name: num_comments
        data_type: int64
        description: "Number of comments"
        tests:
          - not_null
          - not_negative

      - name: num_complexity_ratings
        data_type: int64
        description: "Number of user ratings on complexity"
        tests:
          - not_null
          - not_negative

      - name: avg_complexity_rating
        data_type: float64
        description: >
                    Average complexity score from 1-5 of user ratings on complexity: 'How difficult a game is to understand?'
                    Null if no complexity ratings

                    Light (1)
                    Medium Light (2)
                    Medium (3)
                    Medium Heavy (4)
                    Heavy (5)
        tests:
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 5

      - name: avg_complexity
        data_type: str
        description: >
                    These complexity bands have been created based off the original complexity ratings

                    Light (1-2)
                    Medium light (2-3)
                    Medium heavy (3-4)
                    Heavy (4-5)                    
        tests:
          - accepted_values:
              values: ['Light', 'Medium light','Medium heavy' ,'Heavy']

      - name: num_own
        data_type: int64
        description: "Number of users marked this item as owned"
        tests:
          - not_null
          - not_negative

      - name: num_wishlist
        data_type: int64
        description: "Number of users marked this item as wishlisted"
        tests:
          - not_null
          - not_negative

      - name: num_for_trade
        data_type: int64
        description: "Number of users marked this item as up for trade"
        tests:
          - not_null
          - not_negative

      - name: num_want_in_trade
        data_type: int64
        description: "Number of users marked this item as want to trade"
        tests:
          - not_null
          - not_negative

      - name: bgg_rank
        data_type: int64
        description: "BoardGameGeek rank based off geek_rating. Null if geek_rating is not calculated."
        tests:
          - unique
          - not_negative